---
title: "Getting to know your Data with R"
---

# Goal

Practice basic R commands/methods for descriptive data analysis. If you are already familiar with some of the commands/methods, practice the ones new to you.

**Note**: copying and pasting early in learning will not produce the results you are looking for, and will catch up to you eventually.

## Submission

Please submit `.r`, `.rmd`, or `.qmd` files ONLY.

## Additional resources

I wrote a Quarto book on [Exploratory Data Analysis in R](https://gchism94.github.io/Data7_EDA_In_R_Workshops/) using the `dlookr` package. I won't be showing this package here, but you can use the functions within my book below as well.

# Installing required packages

```{r, eval=FALSE}
# First run this
install.packages("pacman")
```

```{r, message=FALSE}
library(pacman)

p_load(dlookr,
       DMwR2, # Data Mining with R functions
       GGally, # Pair-wise plots using ggplot2
       Hmisc, # Data analysis 
       palmerpenguins, # Alternative to the Iris dataset
       tidyverse) # Data wrangling, manipulation, visualization
```

# Loading data

```{r}
data(algae, package = "DMwR2")

algae |> glimpse()
```

The `|>` is the Base R pipe as opposed to the `magrittr` pipe `%>%`. The `|>` pipe can be utilized for most functions in R, while the `%>%` pipe is more restricted towards the `tidyverse`.

# Central tendency: mean, median, mode

## Mean

```{r}
algae$a1 |>
  mean()
```

## Median

```{r}
algae$a1 |>
  median()
```

## Mode

Base R doesn't have a function for mode, create a simple one to illustrate how to create a function.\
(this method works only for unimodal data.)

```{r}
Mode <- function(x, na.rm=FALSE){
if(na.rm) x<-x[!is.na(x)]
ux <- unique (x)
return (ux[which.max(tabulate(match(x, ux)))])
}

algae$a2 |> Mode()
```

## `DMwR` `centralValue()` function:

returns the median for numerical variable, or the mode for nominal variables.

```{r}
# Numerical variable
algae$a1 |> centralValue()
```

```{r}
# Nominal variable
algae$speed |> centralValue()
```

# Statistics of spread (variation)

## Variance

```{r}
algae$a1 |> var()
```

## Standard deviation

```{r}
algae$a1 |> sd()
```

## Range

Note that this gives you both maximum and minimum values.

```{r}
algae$a1 |> range()
```

## Maximum value

```{r}
algae$a1 |> max()
```

## Minimum value

```{r}
algae$a1 |> min()
```

## Interquartile range

3rd quartile (75%) - 1st quartile (25%)

```{r}
algae$a1 |> IQR()
```

## Quantiles

```{r}
algae$a1 |> quantile()
```

Specifying specific quantiles:

```{r}
algae$a1 |> quantile(probs = c(0.2, 0.8))
```

# Missing values

```{r}
library(purrr)
# Compute the total number of NA values in the dataset
nas <- algae %>% 
  purrr::map_dbl(~sum(is.na(.))) %>% 
  sum()

cat("The dataset contains ", nas, "NA values. \n")

# Compute the number of incomplete rows in the dataset
incomplete_rows <- algae %>% 
  summarise_all(~!complete.cases(.)) %>%
  nrow()

cat("The dataset contains ", incomplete_rows, "(out of ", nrow(algae),") incomplete rows. \n")
```

# Summaries of a dataset

## Base R's `summary()`

```{r}
algae |> summary()
```

## `Hmisc`'s `describe()`

```{r}
data("penguins")
penguins |> Hmisc::describe()
```

GMD is the mean absolute difference between any pairs of observations. A robust dispersion measure, especially for non-normally distributed data.

## `dlookr`'s `describe()`

```{r}
penguins |> dlookr::describe()
```

# Summaries on a subset of data

`dplyr`'s `summarise()` and `summarise_all()`, or use them with `select()` and `group_by()` to create summaries on\
subset of data. Note: `summarise()` = `summarize()`

```{r}
algae |>
  summarise(avgNO3 = mean(NO3, na.rm=TRUE),
            medA1 = median(a1))
```

`summarise_all()` can be used to apply any function that produces a scalar value to any column of a data\
frame table.

```{r}
algae |>
  select(mxPH:Cl) |>
  summarise_all(list(mean, median), na.rm = TRUE)
```

```{r}
algae |>
  select(a1:a7) |>
  summarise_all(funs(var))
```

```{r}
algae |>
  select(a1:a7) |>
  summarise_all(c("min", "max"))
```

## Use `summarise()` with `group_by()`

```{r}
algae |>
  group_by(season, size) |>
  summarise(nObs = n(), mA7 = median(a7))
```

```{r}
penguins |> 
  group_by(species) |>
  summarise(var = var(bill_length_mm, na.rm = TRUE))
```

## Aggregating data

Can be helpful for summary functions that don't return a scalar

```{r}
penguins |>
  group_by(species) |>
  reframe(var = quantile(bill_length_mm, na.rm = TRUE))
```

`reframe()` expects a scalar result returned by the function, but quantile returns a vector.

**Note**: Aggregating data with summarize was deprecated in `dplyr 1.1.0`, `reframe()` should be used instead.

I recommend just using `dlookr`...

```{r}
penguins |>
  group_by(species) |>
  dlookr::describe(bill_length_mm)
```

#### [Grouping functions](https://dplyr.tidyverse.org/reference/index.html#:~:text=This%20%28mostly%29%20experimental%20family%20of%20functions%20are%20used,Apply%20a%20function%20to%20each%20group%20group_trim%20%28%29)

# \[Advanced\]

## Getting to know your dataset:

1.  List data types of the attributes in your tidy dataset

2.  Check for skewness in data distribution in the attributes

3.  Check for correlations among attributes

4.  Examine the extent of missing data. What would be the best way to deal with the missing data in this case?
