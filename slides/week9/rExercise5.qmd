---
title: "Association Analysis in R"
---

# Goal

Practice R commands/methods for descriptive data analysis. If you are already familiar with some of the commands/methods, you can just practice the ones that are new to you.

**Note**: copying and pasting early in learning will not produce the results you are looking for, and will catch up to you eventually.

## Submission

Please submit `.r`, `.rmd`, or `.qmd` files ONLY.

# Overview

We will use packages:

-   **`arules`:** Provides the infrastructure for representing, manipulating and analyzing transaction data and patterns (frequent itemsets and association rules). Also provides C implementations of the association mining algorithms Apriori and Eclat. More see <https://cran.r-project.org/web/packages/arules/arules.pdf>

-   **`arulesViz`:** Extends package 'arules' with various visualization techniques for association rules and itemsets. The package also includes several interactive visualizations for rule exploration. More see <https://cran.r-project.org/web/packages/arulesViz/vignettes/arulesViz.pdf>

-   **`dplyr`**: A data manipulation grammar for working with data frame like objects, both in memory and out of memory. We used some of the command from this package, for more see <https://cran.r-project.org/web/packages/dplyr/dplyr.pdf>. Note that we are loading this package through the `tidyverse`

```{r}
library(pacman)

p_load(arules,
       arulesViz,
       dlookr,
       tidyverse)
```

The Data Mining with R book used the Boston housing dataset as an example for association rule learning. Indeed, association rule learning can be used beyond transaction data mining. 

Boston housing dataset description is at <https://www.cs.toronto.edu/~delve/data/boston/bostonDetail.html> 

The 14 variables in this dataset include:

1.  `CRIM` - per capita crime rate by town

2.  `ZN` - proportion of residential land zoned for lots over 25,000 sq.ft.

3.  `INDUS` - proportion of non-retail business acres per town.

4.  `CHAS` - Charles River dummy variable (1 if tract bounds river; 0 otherwise)

5.  `NOX` - nitric oxides concentration (parts per 10 million)

6.  `RM` - average number of rooms per dwelling

7.  `AGE` - proportion of owner-occupied units built prior to 1940

8.  `DIS` - weighted distances to five Boston employment centres

9.  `RAD` - index of accessibility to radial highways

10. `TAX` - full-value property-tax rate per \$10,000

11. `PTRATIO` - pupil-teacher ratio by town

12. `B - 1000(Bk - 0.63)^2` where Bk is the proportion of blacks by town

13. `LSTAT - %` lower status of the population

14. `MEDV` - Median value of owner-occupied homes in \$1000's

After going through this exercise, perform association rule learning on your dataset. If you have a text dataset, construct a document-term matrix from the text, then convert that to transaction data forma, you can treat the list of terms as items and mine association among the terms. 

You want to explore different thresholds, use the interactive vis tools provided by `arulesViz`, and find and report at least two interesting association rules from your dataset. 

**Optional**: If you would like to experience association rule mining using a transactional dataset, you can also try to use the `Groceries` dataset that comes with the `arules` package. Just say `data(Groceries)` to load the `Groceries` dataset after loading `arules`.

# Load the data

```{r}
data(Boston, package = "MASS")
```

# Transform variables

Association rules learning use categorical data. So the first step is transforming variables to factors.

## Find classes of each of the column

The **`map()`** function is similar to **`lapply()`** but works more consistently with the **`tidyverse`** data structures:

```{r}
map(Boston, class)
```

All variables are 'numeric', really?

Use boxplot, histogram, and/or bar chart to review each of the variables

You will see `chas`, `rad` are likely categorical variables disguised as numerical variables

Show unique values in the variables `chas` and `rad`, confirming they are not continuous variables.

```{r}
Boston |>
distinct(chas)
```

```{r}
Boston |>
distinct(rad)
```

## Make these two variables factors

```{r}
b <- Boston |>
  mutate(chas = factor(chas, labels = c("river", "noriver")),
         rad = factor(rad))
b |> head()
```

## Bin all remaining numerical variables

Bin `black` first, to give it meaningful labels to aid interpretation:

```{r}
b <- b |>
  mutate(black = binning(black, nbins = 4, labels = c(">31.5%", "18.5-31.5%", "8-18.5%", "<8%"), type = "equal"))

```

Now discretize all other numerical variables into 4 equal-width bins \-- this is an arbitrary decision. Ideally expert domain knowledge should be consulted to bin, or try a few different ways, such as equal-depth. Also each variable can be binned differently.

```{r}
bin <-function(x) binning(x, nbins = 4, labels=c("low", "medLow", "medHigh", "High"), type = "equal")
```

Apply function `bin` on all numerical variables (`-c()` to exclude variables that have been converted to factors), then bind the newly cut variables back.

```{r}
b <- b |>
  select(-c("chas", "rad", "black")) |> 
  mutate_all(list(bin)) |> 
  bind_cols(select(b, c("chas", "rad", "black")))
b |> head()
```

```{r}
dim(b)
```

```{r}
b |> summary()
```

Transform the dataframe `b` to a transactions dataset, where each row is described by a set of **binary** variables (this is "bitmap indexing" we learned in Chapter 4 in the textbook)

```{r}
b <- as(b, "transactions")
#transactions data are often very large and sparse, directly looking at it won’t give your much information.You can see how the columns are constructed by using colnames(), or see a summary() of it. To see the records, use inspect(): inspect(b[1:9]) show the first 9 transactions. 
```

```{r}
colnames(b)
```

```{r}
b |> summary()
```

```{r}
inspect(b[1:3]) #a transaction consists of a set of items and a transaction ID. Still have questions on transactions, check out another small example included at the end of this exercise. 
```

Show frequent items with `minsup >= 0.3`. `Cex.names` indicates the size of axis names:

# Inspecting our results

Using `arules`

```{r}
itemFrequencyPlot(b, support=0.3, cex.names=0.8)
```

```{r}
ars <- apriori(b, parameter = list(support = 0.025, confidence = 0.75))
ars
```

```{r}
ars |> summary()
```

# Sub-setting by rules

Say we are interested in the association between pollution `NOX` and property value `MEDV`.

Find top 5 rules by confidence with `medv = High` attribute on the right side `rhs`

```{r}
subset_result <- subset(ars, subset = rhs %in% "medv=High")
subset_result <- sort(subset_result, by = "confidence", decreasing = TRUE)
subset_result <- head(subset_result, n = 5)
inspect(subset_result)

```

Find top 5 rules by confidence with `medv = low` attribute on the right side `rhs`

```{r}
subset_result <- subset(ars, subset = rhs %in% "medv=low")
subset_result <- sort(subset_result, by = "confidence", decreasing = TRUE)
subset_result <- head(subset_result, n = 5)
inspect(subset_result)
```

Use `|` (or) to include other conditions:

```{r}
subset_result <- subset(ars, subset = rhs %in% "nox=High" | lhs %in% "nox=High")
subset_result <- sort(subset_result, by = "confidence", decreasing = TRUE)
subset_result <- head(subset_result, n = 5)
inspect(subset_result)
```

Showing top 5 rules by support with `medv = High` attribute on the right side `rhs`

```{r}
subset_result <- subset(ars, subset = rhs %in% "medv=High")
subset_result <- sort(subset_result, by = "support", decreasing = TRUE)
subset_result <- head(subset_result, n = 5)
inspect(subset_result)
```

## Other ways to subset

### Find rules generated from maximal/closed itemsets:

#### Maximal itemsets

```{r}
subset_result <- subset(ars, subset = is.maximal(ars))
subset_result <- sort(subset_result, by = "confidence", decreasing = TRUE)
subset_result <- head(subset_result, n = 5)
inspect(subset_result)
```

Need to find freq itemsets to find closed itemsets:

```{r}
freq.itemsets <- apriori(b, parameter = list(target = "frequent itemsets", support = 0.025))
freq.itemsets
```

```{r}
subset_result <- subset(ars, subset = is.closed(freq.itemsets))
subset_result <- sort(subset_result, by = "confidence", decreasing = TRUE)
subset_result <- head(subset_result, n = 5)
inspect(subset_result)
```

### Find closed itemsets

```{r}
closed = freq.itemsets[is.closed(freq.itemsets)]
closed |> summary() 
```

### Find maximal itemsets

```{r}
maximal = freq.itemsets[is.maximal(freq.itemsets)]
maximal |> summary()
```

### Check shorter rules

```{r}
subset_result <- subset(ars, subset = size(lhs) < 5 & size(lhs) > 1)
subset_result <- sort(subset_result, by = "support", decreasing = TRUE)
subset_result <- head(subset_result, n = 5)
inspect(subset_result)
```

Note the above rules have high support and confidence but low lift.

```{r}
subset_result <- subset(ars, subset = size(lhs) < 5 & size(lhs) > 1 & lift > 2)
subset_result <- sort(subset_result, by = "support", decreasing = TRUE)
subset_result <- head(subset_result, n = 5)
inspect(subset_result)
```

`arules` compute many different kinds of interestMeasure besides support, confidence, and lift.

See the help page on interestMeasure for more examples. 

# **Visualization of association rules**

## Static

```{r}
plot(ars)
```

## Interactive

***Warning!!!*** : This interactive plot may crash R Studio. Save your project now before running the command below (or don't run it...)

```{r, eval=FALSE}
plot(ars, engine="interactive")
```

Click the stop sign or the `ESC` key to terminate an interactive session. 

You can filter your rules to a smaller set and then use the interactive exploration to identify interesting rules. 

```{r, eval=FALSE}
plot(ars, engine="htmlwidget")
```

## Grouped

```{r, eval=FALSE}
somerules <- subset(ars, subset = size(lhs) > 1 & confidence > 0.90 & support > 0.5)

plot(somerules, method = "grouped")

```

![](confGroup.png)

#### Matrix grouped plot

```{r, eval=FALSE}
plot(somerules, method="matrix")
```

![](confMatrix.png)

## Graph (network) plot

```{r, eval=FALSE}
plot(somerules, method = "graph")
```

![](condGraph.png)

### Interactive

```{r, eval=FALSE}
plot(somerules, method = "graph", engine = "htmlwidget")
```

# Illustrate what is "transactions" data structure using a small example

## Example

```{r}
d <- data.frame(site = c("tucson", "phoenix"), season = c("spring", "summer"), price = c("high", "low"))
d
```

## Convert dataframe to transactions

```{r}
d_t <-as(d, "transactions")
d_t
```

Each row in the dataframe is converted to one transaction (2 transactions total).

What are the 6 items?

```{r}
d_t |> summary()
```

Why `density = 0.5`?

Because the bitmap index is half empty:

|     |        |        |           |           |         |         |
|-----|--------|--------|-----------|-----------|---------|---------|
|     | Site=t | Site=p | Season=sp | Season=su | Price=h | Price=l |
| 1   | 1      |        | 1         |           | 1       |         |
| 2   |        | 1      |           | 1         |         | 1       |

## Check out the transaction records

```{r}
inspect(d_t[1:2])
```

Each transaction has one itemset, and in this example, the itemset for transaction 1 is `site=tucson`, `season=spring`, `price=high`.

# **\[ADVANCED\]**

## Exercises on your data set:

Mine association rules from your dataset. Discuss a couple of interesting rules mined. 
