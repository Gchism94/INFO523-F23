{
  "hash": "721d4d9224ab64af98b150e692aff2b6",
  "result": {
    "markdown": "---\ntitle: \"Association Analysis in R\"\n---\n\n\n# Goal\n\nPractice R commands/methods for descriptive data analysis. If you are already familiar with some of the commands/methods, you can just practice the ones that are new to you.\n\n**Note**: copying and pasting early in learning will not produce the results you are looking for, and will catch up to you eventually.\n\n## Submission\n\nPlease submit `.r`, `.rmd`, or `.qmd` files ONLY.\n\n# Overview\n\nWe will use packages:\n\n-   **`arules`:** Provides the infrastructure for representing, manipulating and analyzing transaction data and patterns (frequent itemsets and association rules). Also provides C implementations of the association mining algorithms Apriori and Eclat. More see <https://cran.r-project.org/web/packages/arules/arules.pdf>\n\n-   **`arulesViz`:** Extends package 'arules' with various visualization techniques for association rules and itemsets. The package also includes several interactive visualizations for rule exploration. More see <https://cran.r-project.org/web/packages/arulesViz/vignettes/arulesViz.pdf>\n\n-   **`dplyr`**: A data manipulation grammar for working with data frame like objects, both in memory and out of memory. We used some of the command from this package, for more see <https://cran.r-project.org/web/packages/dplyr/dplyr.pdf>. Note that we are loading this package through the `tidyverse`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pacman)\n\np_load(arules,\n       arulesViz,\n       dlookr,\n       tidyverse)\n```\n:::\n\n\nThe Data Mining with R book used the Boston housing dataset as an example for association rule learning. Indeed, association rule learning can be used beyond transaction data mining. \n\nBoston housing dataset description is at <https://www.cs.toronto.edu/~delve/data/boston/bostonDetail.html> \n\nThe 14 variables in this dataset include:\n\n1.  `CRIM` - per capita crime rate by town\n\n2.  `ZN` - proportion of residential land zoned for lots over 25,000 sq.ft.\n\n3.  `INDUS` - proportion of non-retail business acres per town.\n\n4.  `CHAS` - Charles River dummy variable (1 if tract bounds river; 0 otherwise)\n\n5.  `NOX` - nitric oxides concentration (parts per 10 million)\n\n6.  `RM` - average number of rooms per dwelling\n\n7.  `AGE` - proportion of owner-occupied units built prior to 1940\n\n8.  `DIS` - weighted distances to five Boston employment centres\n\n9.  `RAD` - index of accessibility to radial highways\n\n10. `TAX` - full-value property-tax rate per \\$10,000\n\n11. `PTRATIO` - pupil-teacher ratio by town\n\n12. `B - 1000(Bk - 0.63)^2` where Bk is the proportion of blacks by town\n\n13. `LSTAT - %` lower status of the population\n\n14. `MEDV` - Median value of owner-occupied homes in \\$1000's\n\nAfter going through this exercise, perform association rule learning on your dataset. If you have a text dataset, construct a document-term matrix from the text, then convert that to transaction data forma, you can treat the list of terms as items and mine association among the terms. \n\nYou want to explore different thresholds, use the interactive vis tools provided by `arulesViz`, and find and report at least two interesting association rules from your dataset. \n\n**Optional**: If you would like to experience association rule mining using a transactional dataset, you can also try to use the `Groceries` dataset that comes with the `arules` package. Just say `data(Groceries)` to load the `Groceries` dataset after loading `arules`.\n\n# Load the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(Boston, package = \"MASS\")\n```\n:::\n\n\n# Transform variables\n\nAssociation rules learning use categorical data. So the first step is transforming variables to factors.\n\n## Find classes of each of the column\n\nThe **`map()`** function is similar to **`lapply()`** but works more consistently with the **`tidyverse`** data structures:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap(Boston, class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$crim\n[1] \"numeric\"\n\n$zn\n[1] \"numeric\"\n\n$indus\n[1] \"numeric\"\n\n$chas\n[1] \"integer\"\n\n$nox\n[1] \"numeric\"\n\n$rm\n[1] \"numeric\"\n\n$age\n[1] \"numeric\"\n\n$dis\n[1] \"numeric\"\n\n$rad\n[1] \"integer\"\n\n$tax\n[1] \"numeric\"\n\n$ptratio\n[1] \"numeric\"\n\n$black\n[1] \"numeric\"\n\n$lstat\n[1] \"numeric\"\n\n$medv\n[1] \"numeric\"\n```\n:::\n:::\n\n\nAll variables are 'numeric', really?\n\nUse boxplot, histogram, and/or bar chart to review each of the variables\n\nYou will see `chas`, `rad` are likely categorical variables disguised as numerical variables\n\nShow unique values in the variables `chas` and `rad`, confirming they are not continuous variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBoston |>\ndistinct(chas)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  chas\n1    0\n2    1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nBoston |>\ndistinct(rad)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  rad\n1   1\n2   2\n3   3\n4   5\n5   4\n6   8\n7   6\n8   7\n9  24\n```\n:::\n:::\n\n\n## Make these two variables factors\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb <- Boston |>\n  mutate(chas = factor(chas, labels = c(\"river\", \"noriver\")),\n         rad = factor(rad))\nb |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     crim zn indus  chas   nox    rm  age    dis rad tax ptratio  black lstat\n1 0.00632 18  2.31 river 0.538 6.575 65.2 4.0900   1 296    15.3 396.90  4.98\n2 0.02731  0  7.07 river 0.469 6.421 78.9 4.9671   2 242    17.8 396.90  9.14\n3 0.02729  0  7.07 river 0.469 7.185 61.1 4.9671   2 242    17.8 392.83  4.03\n4 0.03237  0  2.18 river 0.458 6.998 45.8 6.0622   3 222    18.7 394.63  2.94\n5 0.06905  0  2.18 river 0.458 7.147 54.2 6.0622   3 222    18.7 396.90  5.33\n6 0.02985  0  2.18 river 0.458 6.430 58.7 6.0622   3 222    18.7 394.12  5.21\n  medv\n1 24.0\n2 21.6\n3 34.7\n4 33.4\n5 36.2\n6 28.7\n```\n:::\n:::\n\n\n## Bin all remaining numerical variables\n\nBin `black` first, to give it meaningful labels to aid interpretation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb <- b |>\n  mutate(black = binning(black, nbins = 4, labels = c(\">31.5%\", \"18.5-31.5%\", \"8-18.5%\", \"<8%\"), type = \"equal\"))\n```\n:::\n\n\nNow discretize all other numerical variables into 4 equal-width bins \\-- this is an arbitrary decision. Ideally expert domain knowledge should be consulted to bin, or try a few different ways, such as equal-depth. Also each variable can be binned differently.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbin <-function(x) binning(x, nbins = 4, labels=c(\"low\", \"medLow\", \"medHigh\", \"High\"), type = \"equal\")\n```\n:::\n\n\nApply function `bin` on all numerical variables (`-c()` to exclude variables that have been converted to factors), then bind the newly cut variables back.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb <- b |>\n  select(-c(\"chas\", \"rad\", \"black\")) |> \n  mutate_all(list(bin)) |> \n  bind_cols(select(b, c(\"chas\", \"rad\", \"black\")))\nb |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  crim  zn indus    nox      rm     age    dis tax ptratio lstat    medv  chas\n1  low low   low medLow medHigh medHigh medLow low  medLow   low  medLow river\n2  low low   low    low medHigh    High medLow low medHigh   low  medLow river\n3  low low   low    low medHigh medHigh medLow low medHigh   low medHigh river\n4  low low   low    low medHigh  medLow medLow low medHigh   low medHigh river\n5  low low   low    low medHigh medHigh medLow low medHigh   low medHigh river\n6  low low   low    low medHigh medHigh medLow low medHigh   low medHigh river\n  rad black\n1   1   <8%\n2   2   <8%\n3   2   <8%\n4   3   <8%\n5   3   <8%\n6   3   <8%\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 506  14\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nb |> summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     crim                                                  \n levels:c(\"low\", \"medLow\", \"medHigh\", \"High\")              \n freq  :c(\"491\", \" 10\", \"  2\", \"  3\")                      \n rate  :c(\"0.970356\", \"0.019763\", \"0.003953\", \"0.005929\")  \n                                                           \n                                                           \n                                                           \n                                                           \n      zn                                               \n levels:c(\"low\", \"medLow\", \"medHigh\", \"High\")          \n freq  :c(\"429\", \" 32\", \" 16\", \" 29\")                  \n rate  :c(\"0.84783\", \"0.06324\", \"0.03162\", \"0.05731\")  \n                                                       \n                                                       \n                                                       \n                                                       \n    indus                                              \n levels:c(\"low\", \"medLow\", \"medHigh\", \"High\")          \n freq  :c(\"202\", \"112\", \"165\", \" 27\")                  \n rate  :c(\"0.39921\", \"0.22134\", \"0.32609\", \"0.05336\")  \n                                                       \n                                                       \n                                                       \n                                                       \n     nox                                               \n levels:c(\"low\", \"medLow\", \"medHigh\", \"High\")          \n freq  :c(\"200\", \"182\", \"100\", \" 24\")                  \n rate  :c(\"0.39526\", \"0.35968\", \"0.19763\", \"0.04743\")  \n                                                       \n                                                       \n                                                       \n                                                       \n      rm                                               \n levels:c(\"low\", \"medLow\", \"medHigh\", \"High\")          \n freq  :c(\"  8\", \"234\", \"236\", \" 28\")                  \n rate  :c(\"0.01581\", \"0.46245\", \"0.46640\", \"0.05534\")  \n                                                       \n                                                       \n                                                       \n                                                       \n     age                                           \n levels:c(\"low\", \"medLow\", \"medHigh\", \"High\")      \n freq  :c(\" 51\", \" 97\", \" 96\", \"262\")              \n rate  :c(\"0.1008\", \"0.1917\", \"0.1897\", \"0.5178\")  \n                                                   \n                                                   \n                                                   \n                                                   \n     dis                                                   \n levels:c(\"low\", \"medLow\", \"medHigh\", \"High\")              \n freq  :c(\"305\", \"144\", \" 52\", \"  5\")                      \n rate  :c(\"0.602767\", \"0.284585\", \"0.102767\", \"0.009881\")  \n                                                           \n                                                           \n                                                           \n                                                           \n     tax                                                   \n levels:c(\"low\", \"medLow\", \"medHigh\", \"High\")              \n freq  :c(\"240\", \"128\", \"  1\", \"137\")                      \n rate  :c(\"0.474308\", \"0.252964\", \"0.001976\", \"0.270751\")  \n                                                           \n                                                           \n                                                           \n                                                           \n   ptratio                                         \n levels:c(\"low\", \"medLow\", \"medHigh\", \"High\")      \n freq  :c(\" 58\", \" 68\", \"171\", \"209\")              \n rate  :c(\"0.1146\", \"0.1344\", \"0.3379\", \"0.4130\")  \n                                                   \n                                                   \n                                                   \n                                                   \n    lstat                                              \n levels:c(\"low\", \"medLow\", \"medHigh\", \"High\")          \n freq  :c(\"243\", \"187\", \" 57\", \" 19\")                  \n rate  :c(\"0.48024\", \"0.36957\", \"0.11265\", \"0.03755\")  \n                                                       \n                                                       \n                                                       \n                                                       \n     medv                                                    chas    \n levels:c(\"low\", \"medLow\", \"medHigh\", \"High\")           river  :471  \n freq  :c(\"116\", \"284\", \" 74\", \" 32\")                   noriver: 35  \n rate  :c(\"0.22925\", \"0.56126\", \"0.14625\", \"0.06324\")                \n                                                                     \n                                                                     \n                                                                     \n                                                                     \n      rad         black                                              \n 24     :132   levels:c(\">31.5%\", \"18.5-31.5%\", \"8-18.5%\", \"<8%\")    \n 5      :115   freq  :c(\" 31\", \"  8\", \" 15\", \"452\")                  \n 4      :110   rate  :c(\"0.06126\", \"0.01581\", \"0.02964\", \"0.89328\")  \n 3      : 38                                                         \n 6      : 26                                                         \n 2      : 24                                                         \n (Other): 61                                                         \n```\n:::\n:::\n\n\nTransform the dataframe `b` to a transactions dataset, where each row is described by a set of **binary** variables (this is \"bitmap indexing\" we learned in Chapter 4 in the textbook)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb <- as(b, \"transactions\")\n#transactions data are often very large and sparse, directly looking at it won’t give your much information.You can see how the columns are constructed by using colnames(), or see a summary() of it. To see the records, use inspect(): inspect(b[1:9]) show the first 9 transactions. \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"crim=low\"         \"crim=medLow\"      \"crim=medHigh\"     \"crim=High\"       \n [5] \"zn=low\"           \"zn=medLow\"        \"zn=medHigh\"       \"zn=High\"         \n [9] \"indus=low\"        \"indus=medLow\"     \"indus=medHigh\"    \"indus=High\"      \n[13] \"nox=low\"          \"nox=medLow\"       \"nox=medHigh\"      \"nox=High\"        \n[17] \"rm=low\"           \"rm=medLow\"        \"rm=medHigh\"       \"rm=High\"         \n[21] \"age=low\"          \"age=medLow\"       \"age=medHigh\"      \"age=High\"        \n[25] \"dis=low\"          \"dis=medLow\"       \"dis=medHigh\"      \"dis=High\"        \n[29] \"tax=low\"          \"tax=medLow\"       \"tax=medHigh\"      \"tax=High\"        \n[33] \"ptratio=low\"      \"ptratio=medLow\"   \"ptratio=medHigh\"  \"ptratio=High\"    \n[37] \"lstat=low\"        \"lstat=medLow\"     \"lstat=medHigh\"    \"lstat=High\"      \n[41] \"medv=low\"         \"medv=medLow\"      \"medv=medHigh\"     \"medv=High\"       \n[45] \"chas=river\"       \"chas=noriver\"     \"rad=1\"            \"rad=2\"           \n[49] \"rad=3\"            \"rad=4\"            \"rad=5\"            \"rad=6\"           \n[53] \"rad=7\"            \"rad=8\"            \"rad=24\"           \"black=>31.5%\"    \n[57] \"black=18.5-31.5%\" \"black=8-18.5%\"    \"black=<8%\"       \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nb |> summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntransactions as itemMatrix in sparse format with\n 506 rows (elements/itemsets/transactions) and\n 59 columns (items) and a density of 0.2372881 \n\nmost frequent items:\n  crim=low chas=river  black=<8%     zn=low    dis=low    (Other) \n       491        471        452        429        305       4936 \n\nelement (itemset/transaction) length distribution:\nsizes\n 14 \n506 \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n     14      14      14      14      14      14 \n\nincludes extended item information - examples:\n        labels variables  levels\n1     crim=low      crim     low\n2  crim=medLow      crim  medLow\n3 crim=medHigh      crim medHigh\n\nincludes extended transaction information - examples:\n  transactionID\n1             1\n2             2\n3             3\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ninspect(b[1:3]) #a transaction consists of a set of items and a transaction ID. Still have questions on transactions, check out another small example included at the end of this exercise. \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    items              transactionID\n[1] {crim=low,                      \n     zn=low,                        \n     indus=low,                     \n     nox=medLow,                    \n     rm=medHigh,                    \n     age=medHigh,                   \n     dis=medLow,                    \n     tax=low,                       \n     ptratio=medLow,                \n     lstat=low,                     \n     medv=medLow,                   \n     chas=river,                    \n     rad=1,                         \n     black=<8%}                    1\n[2] {crim=low,                      \n     zn=low,                        \n     indus=low,                     \n     nox=low,                       \n     rm=medHigh,                    \n     age=High,                      \n     dis=medLow,                    \n     tax=low,                       \n     ptratio=medHigh,               \n     lstat=low,                     \n     medv=medLow,                   \n     chas=river,                    \n     rad=2,                         \n     black=<8%}                    2\n[3] {crim=low,                      \n     zn=low,                        \n     indus=low,                     \n     nox=low,                       \n     rm=medHigh,                    \n     age=medHigh,                   \n     dis=medLow,                    \n     tax=low,                       \n     ptratio=medHigh,               \n     lstat=low,                     \n     medv=medHigh,                  \n     chas=river,                    \n     rad=2,                         \n     black=<8%}                    3\n```\n:::\n:::\n\n\nShow frequent items with `minsup >= 0.3`. `Cex.names` indicates the size of axis names:\n\n# Inspecting our results\n\nUsing `arules`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nitemFrequencyPlot(b, support=0.3, cex.names=0.8)\n```\n\n::: {.cell-output-display}\n![](rExercise5_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nars <- apriori(b, parameter = list(support = 0.025, confidence = 0.75))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nApriori\n\nParameter specification:\n confidence minval smax arem  aval originalSupport maxtime support minlen\n       0.75    0.1    1 none FALSE            TRUE       5   0.025      1\n maxlen target  ext\n     10  rules TRUE\n\nAlgorithmic control:\n filter tree heap memopt load sort verbose\n    0.1 TRUE TRUE  FALSE TRUE    2    TRUE\n\nAbsolute minimum support count: 12 \n\nset item appearances ...[0 item(s)] done [0.00s].\nset transactions ...[59 item(s), 506 transaction(s)] done [0.00s].\nsorting and recoding items ... [52 item(s)] done [0.00s].\ncreating transaction tree ... done [0.00s].\nchecking subsets of size 1 2 3 4 5 6 7 8 9 10 done [0.02s].\nwriting ... [408638 rule(s)] done [0.02s].\ncreating S4 object  ... done [0.19s].\n```\n:::\n\n```{.r .cell-code}\nars\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nset of 408638 rules \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nars |> summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nset of 408638 rules\n\nrule length distribution (lhs + rhs):sizes\n     1      2      3      4      5      6      7      8      9     10 \n     4    293   3650  18932  53620  92554 103550  78411  41677  15947 \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   6.000   7.000   6.846   8.000  10.000 \n\nsummary of quality measures:\n    support          confidence        coverage            lift        \n Min.   :0.02569   Min.   :0.7500   Min.   :0.02569   Min.   : 0.7799  \n 1st Qu.:0.02964   1st Qu.:0.9189   1st Qu.:0.02964   1st Qu.: 1.0743  \n Median :0.03755   Median :1.0000   Median :0.03953   Median : 1.6590  \n Mean   :0.04857   Mean   :0.9517   Mean   :0.05150   Mean   : 1.9759  \n 3rd Qu.:0.05534   3rd Qu.:1.0000   3rd Qu.:0.05731   3rd Qu.: 2.4211  \n Max.   :0.97036   Max.   :1.0000   Max.   :1.00000   Max.   :19.4615  \n     count       \n Min.   : 13.00  \n 1st Qu.: 15.00  \n Median : 19.00  \n Mean   : 24.58  \n 3rd Qu.: 28.00  \n Max.   :491.00  \n\nmining info:\n data ntransactions support confidence\n    b           506   0.025       0.75\n                                                                    call\n apriori(data = b, parameter = list(support = 0.025, confidence = 0.75))\n```\n:::\n:::\n\n\n# Sub-setting by rules\n\nSay we are interested in the association between pollution `NOX` and property value `MEDV`.\n\nFind top 5 rules by confidence with `medv = High` attribute on the right side `rhs`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset_result <- subset(ars, subset = rhs %in% \"medv=High\")\nsubset_result <- sort(subset_result, by = \"confidence\", decreasing = TRUE)\nsubset_result <- head(subset_result, n = 5)\ninspect(subset_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    lhs               rhs            support confidence   coverage    lift count\n[1] {rm=High,                                                                   \n     ptratio=low}  => {medv=High} 0.02964427          1 0.02964427 15.8125    15\n[2] {rm=High,                                                                   \n     ptratio=low,                                                               \n     lstat=low}    => {medv=High} 0.02964427          1 0.02964427 15.8125    15\n[3] {rm=High,                                                                   \n     ptratio=low,                                                               \n     black=<8%}    => {medv=High} 0.02964427          1 0.02964427 15.8125    15\n[4] {crim=low,                                                                  \n     rm=High,                                                                   \n     ptratio=low}  => {medv=High} 0.02964427          1 0.02964427 15.8125    15\n[5] {rm=High,                                                                   \n     ptratio=low,                                                               \n     lstat=low,                                                                 \n     black=<8%}    => {medv=High} 0.02964427          1 0.02964427 15.8125    15\n```\n:::\n:::\n\n\nFind top 5 rules by confidence with `medv = low` attribute on the right side `rhs`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset_result <- subset(ars, subset = rhs %in% \"medv=low\")\nsubset_result <- sort(subset_result, by = \"confidence\", decreasing = TRUE)\nsubset_result <- head(subset_result, n = 5)\ninspect(subset_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    lhs                 rhs           support confidence   coverage     lift count\n[1] {nox=medHigh,                                                                 \n     lstat=medHigh}  => {medv=low} 0.05928854          1 0.05928854 4.362069    30\n[2] {nox=medHigh,                                                                 \n     lstat=medHigh,                                                               \n     rad=24}         => {medv=low} 0.05928854          1 0.05928854 4.362069    30\n[3] {nox=medHigh,                                                                 \n     tax=High,                                                                    \n     lstat=medHigh}  => {medv=low} 0.05928854          1 0.05928854 4.362069    30\n[4] {indus=medHigh,                                                               \n     nox=medHigh,                                                                 \n     lstat=medHigh}  => {medv=low} 0.05928854          1 0.05928854 4.362069    30\n[5] {nox=medHigh,                                                                 \n     ptratio=High,                                                                \n     lstat=medHigh}  => {medv=low} 0.05928854          1 0.05928854 4.362069    30\n```\n:::\n:::\n\n\nUse `|` (or) to include other conditions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset_result <- subset(ars, subset = rhs %in% \"nox=High\" | lhs %in% \"nox=High\")\nsubset_result <- sort(subset_result, by = \"confidence\", decreasing = TRUE)\nsubset_result <- head(subset_result, n = 5)\ninspect(subset_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    lhs           rhs             support    confidence coverage   lift    \n[1] {nox=High} => {indus=medHigh} 0.04743083 1          0.04743083 3.066667\n[2] {nox=High} => {age=High}      0.04743083 1          0.04743083 1.931298\n[3] {nox=High} => {dis=low}       0.04743083 1          0.04743083 1.659016\n[4] {nox=High} => {zn=low}        0.04743083 1          0.04743083 1.179487\n[5] {nox=High} => {crim=low}      0.04743083 1          0.04743083 1.030550\n    count\n[1] 24   \n[2] 24   \n[3] 24   \n[4] 24   \n[5] 24   \n```\n:::\n:::\n\n\nShowing top 5 rules by support with `medv = High` attribute on the right side `rhs`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset_result <- subset(ars, subset = rhs %in% \"medv=High\")\nsubset_result <- sort(subset_result, by = \"support\", decreasing = TRUE)\nsubset_result <- head(subset_result, n = 5)\ninspect(subset_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    lhs                                rhs         support    confidence\n[1] {rm=High}                       => {medv=High} 0.04743083 0.8571429 \n[2] {rm=High, lstat=low}            => {medv=High} 0.04743083 0.8571429 \n[3] {rm=High, black=<8%}            => {medv=High} 0.04743083 0.8571429 \n[4] {crim=low, rm=High}             => {medv=High} 0.04743083 0.8571429 \n[5] {rm=High, lstat=low, black=<8%} => {medv=High} 0.04743083 0.8571429 \n    coverage   lift     count\n[1] 0.05533597 13.55357 24   \n[2] 0.05533597 13.55357 24   \n[3] 0.05533597 13.55357 24   \n[4] 0.05533597 13.55357 24   \n[5] 0.05533597 13.55357 24   \n```\n:::\n:::\n\n\n## Other ways to subset\n\n### Find rules generated from maximal/closed itemsets:\n\n#### Maximal itemsets\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset_result <- subset(ars, subset = is.maximal(ars))\nsubset_result <- sort(subset_result, by = \"confidence\", decreasing = TRUE)\nsubset_result <- head(subset_result, n = 5)\ninspect(subset_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    lhs                                       rhs         support   confidence\n[1] {zn=low, lstat=medLow, chas=noriver}   => {crim=low}  0.0256917 1         \n[2] {crim=low, lstat=medLow, chas=noriver} => {zn=low}    0.0256917 1         \n[3] {rm=medHigh, chas=noriver, black=<8%}  => {crim=low}  0.0256917 1         \n[4] {crim=low, rm=medHigh, chas=noriver}   => {black=<8%} 0.0256917 1         \n[5] {rm=medLow, ptratio=low, medv=medLow}  => {crim=low}  0.0256917 1         \n    coverage  lift     count\n[1] 0.0256917 1.030550 13   \n[2] 0.0256917 1.179487 13   \n[3] 0.0256917 1.030550 13   \n[4] 0.0256917 1.119469 13   \n[5] 0.0256917 1.030550 13   \n```\n:::\n:::\n\n\nNeed to find freq itemsets to find closed itemsets:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfreq.itemsets <- apriori(b, parameter = list(target = \"frequent itemsets\", support = 0.025))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nApriori\n\nParameter specification:\n confidence minval smax arem  aval originalSupport maxtime support minlen\n         NA    0.1    1 none FALSE            TRUE       5   0.025      1\n maxlen            target  ext\n     10 frequent itemsets TRUE\n\nAlgorithmic control:\n filter tree heap memopt load sort verbose\n    0.1 TRUE TRUE  FALSE TRUE    2    TRUE\n\nAbsolute minimum support count: 12 \n\nset item appearances ...[0 item(s)] done [0.00s].\nset transactions ...[59 item(s), 506 transaction(s)] done [0.00s].\nsorting and recoding items ... [52 item(s)] done [0.00s].\ncreating transaction tree ... done [0.00s].\nchecking subsets of size 1 2 3 4 5 6 7 8 9 10 done [0.02s].\nsorting transactions ... done [0.00s].\nwriting ... [106259 set(s)] done [0.01s].\ncreating S4 object  ... done [0.01s].\n```\n:::\n\n```{.r .cell-code}\nfreq.itemsets\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nset of 106259 itemsets \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset_result <- subset(ars, subset = is.closed(freq.itemsets))\nsubset_result <- sort(subset_result, by = \"confidence\", decreasing = TRUE)\nsubset_result <- head(subset_result, n = 5)\ninspect(subset_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    lhs           rhs             support    confidence coverage   lift    \n[1] {rad=1}    => {black=<8%}     0.03952569 1          0.03952569 1.119469\n[2] {nox=High} => {indus=medHigh} 0.04743083 1          0.04743083 3.066667\n[3] {nox=High} => {dis=low}       0.04743083 1          0.04743083 1.659016\n[4] {nox=High} => {zn=low}        0.04743083 1          0.04743083 1.179487\n[5] {rad=2}    => {black=<8%}     0.04743083 1          0.04743083 1.119469\n    count\n[1] 20   \n[2] 24   \n[3] 24   \n[4] 24   \n[5] 24   \n```\n:::\n:::\n\n\n### Find closed itemsets\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclosed = freq.itemsets[is.closed(freq.itemsets)]\nclosed |> summary() \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nset of 11351 itemsets\n\nmost frequent items:\n  crim=low  black=<8%     zn=low chas=river    dis=low    (Other) \n      9822       7839       7794       6833       4237      44615 \n\nelement (itemset/transaction) length distribution:sizes\n   1    2    3    4    5    6    7    8    9   10 \n  13   72  239  632 1309 2059 2346 1782  829 2070 \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   6.000   7.000   7.148   9.000  10.000 \n\nsummary of quality measures:\n    support            count       \n Min.   :0.02569   Min.   : 13.00  \n 1st Qu.:0.03360   1st Qu.: 17.00  \n Median :0.04743   Median : 24.00  \n Mean   :0.06915   Mean   : 34.99  \n 3rd Qu.:0.07708   3rd Qu.: 39.00  \n Max.   :0.97036   Max.   :491.00  \n\nincludes transaction ID lists: FALSE \n\nmining info:\n data ntransactions support confidence\n    b           506   0.025          1\n                                                                               call\n apriori(data = b, parameter = list(target = \"frequent itemsets\", support = 0.025))\n```\n:::\n:::\n\n\n### Find maximal itemsets\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmaximal = freq.itemsets[is.maximal(freq.itemsets)]\nmaximal |> summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nset of 2949 itemsets\n\nmost frequent items:\n  crim=low chas=river     zn=low  black=<8%    dis=low    (Other) \n      2401       2247       2238       2093       1755      16939 \n\nelement (itemset/transaction) length distribution:sizes\n   4    5    6    7    8    9   10 \n   4   21   57  184  295  318 2070 \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  4.000   9.000  10.000   9.384  10.000  10.000 \n\nsummary of quality measures:\n    support            count      \n Min.   :0.02569   Min.   :13.00  \n 1st Qu.:0.02569   1st Qu.:13.00  \n Median :0.02964   Median :15.00  \n Mean   :0.03450   Mean   :17.46  \n 3rd Qu.:0.03755   3rd Qu.:19.00  \n Max.   :0.14032   Max.   :71.00  \n\nincludes transaction ID lists: FALSE \n\nmining info:\n data ntransactions support confidence\n    b           506   0.025          1\n                                                                               call\n apriori(data = b, parameter = list(target = \"frequent itemsets\", support = 0.025))\n```\n:::\n:::\n\n\n### Check shorter rules\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset_result <- subset(ars, subset = size(lhs) < 5 & size(lhs) > 1)\nsubset_result <- sort(subset_result, by = \"support\", decreasing = TRUE)\nsubset_result <- head(subset_result, n = 5)\ninspect(subset_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    lhs                        rhs          support   confidence coverage \n[1] {chas=river, black=<8%} => {crim=low}   0.8083004 0.9784689  0.8260870\n[2] {crim=low, black=<8%}   => {chas=river} 0.8083004 0.9232506  0.8754941\n[3] {crim=low, chas=river}  => {black=<8%}  0.8083004 0.8969298  0.9011858\n[4] {zn=low, chas=river}    => {crim=low}   0.7569170 0.9623116  0.7865613\n[5] {crim=low, zn=low}      => {chas=river} 0.7569170 0.9251208  0.8181818\n    lift      count\n[1] 1.0083610 409  \n[2] 0.9918573 409  \n[3] 1.0040852 409  \n[4] 0.9917101 383  \n[5] 0.9938665 383  \n```\n:::\n:::\n\n\nNote the above rules have high support and confidence but low lift.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset_result <- subset(ars, subset = size(lhs) < 5 & size(lhs) > 1 & lift > 2)\nsubset_result <- sort(subset_result, by = \"support\", decreasing = TRUE)\nsubset_result <- head(subset_result, n = 5)\ninspect(subset_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    lhs                               rhs         support   confidence\n[1] {nox=low, black=<8%}           => {indus=low} 0.3221344 0.8150000 \n[2] {indus=low, black=<8%}         => {nox=low}   0.3221344 0.8069307 \n[3] {crim=low, nox=low}            => {indus=low} 0.3221344 0.8150000 \n[4] {crim=low, indus=low}          => {nox=low}   0.3221344 0.8069307 \n[5] {crim=low, nox=low, black=<8%} => {indus=low} 0.3221344 0.8150000 \n    coverage  lift     count\n[1] 0.3952569 2.041535 163  \n[2] 0.3992095 2.041535 163  \n[3] 0.3952569 2.041535 163  \n[4] 0.3992095 2.041535 163  \n[5] 0.3952569 2.041535 163  \n```\n:::\n:::\n\n\n`arules` compute many different kinds of interestMeasure besides support, confidence, and lift.\n\nSee the help page on interestMeasure for more examples. \n\n# **Visualization of association rules**\n\n## Static\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(ars)\n```\n\n::: {.cell-output-display}\n![](rExercise5_files/figure-revealjs/unnamed-chunk-30-1.png){width=960}\n:::\n:::\n\n\n## Interactive\n\n***Warning!!!*** : This interactive plot may crash R Studio. Save your project now before running the command below (or don't run it...)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(ars, engine=\"interactive\")\n```\n:::\n\n\nClick the stop sign or the `ESC` key to terminate an interactive session. \n\nYou can filter your rules to a smaller set and then use the interactive exploration to identify interesting rules. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(ars, engine=\"htmlwidget\")\n```\n:::\n\n\n## Grouped\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsomerules <- subset(ars, subset = size(lhs) > 1 & confidence > 0.90 & support > 0.5)\n\nplot(somerules, method = \"grouped\")\n```\n:::\n\n\n![](confGroup.png)\n\n#### Matrix grouped plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(somerules, method=\"matrix\")\n```\n:::\n\n\n![](confMatrix.png)\n\n## Graph (network) plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(somerules, method = \"graph\")\n```\n:::\n\n\n![](condGraph.png)\n\n### Interactive\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(somerules, method = \"graph\", engine = \"htmlwidget\")\n```\n:::\n\n\n# Illustrate what is \"transactions\" data structure using a small example\n\n## Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- data.frame(site = c(\"tucson\", \"phoenix\"), season = c(\"spring\", \"summer\"), price = c(\"high\", \"low\"))\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     site season price\n1  tucson spring  high\n2 phoenix summer   low\n```\n:::\n:::\n\n\n## Convert dataframe to transactions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_t <-as(d, \"transactions\")\nd_t\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntransactions in sparse format with\n 2 transactions (rows) and\n 6 items (columns)\n```\n:::\n:::\n\n\nEach row in the dataframe is converted to one transaction (2 transactions total).\n\nWhat are the 6 items?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_t |> summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntransactions as itemMatrix in sparse format with\n 2 rows (elements/itemsets/transactions) and\n 6 columns (items) and a density of 0.5 \n\nmost frequent items:\n site=phoenix   site=tucson season=spring season=summer    price=high \n            1             1             1             1             1 \n      (Other) \n            1 \n\nelement (itemset/transaction) length distribution:\nsizes\n3 \n2 \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      3       3       3       3       3       3 \n\nincludes extended item information - examples:\n         labels variables  levels\n1  site=phoenix      site phoenix\n2   site=tucson      site  tucson\n3 season=spring    season  spring\n\nincludes extended transaction information - examples:\n  transactionID\n1             1\n2             2\n```\n:::\n:::\n\n\nWhy `density = 0.5`?\n\nBecause the bitmap index is half empty:\n\n|     |        |        |           |           |         |         |\n|-----|--------|--------|-----------|-----------|---------|---------|\n|     | Site=t | Site=p | Season=sp | Season=su | Price=h | Price=l |\n| 1   | 1      |        | 1         |           | 1       |         |\n| 2   |        | 1      |           | 1         |         | 1       |\n\n## Check out the transaction records\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninspect(d_t[1:2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    items                                    transactionID\n[1] {site=tucson, season=spring, price=high} 1            \n[2] {site=phoenix, season=summer, price=low} 2            \n```\n:::\n:::\n\n\nEach transaction has one itemset, and in this example, the itemset for transaction 1 is `site=tucson`, `season=spring`, `price=high`.\n\n# **\\[ADVANCED\\]**\n\n## Exercises on your data set:\n\nMine association rules from your dataset. Discuss a couple of interesting rules mined. \n",
    "supporting": [
      "rExercise5_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}