{
  "hash": "6c6f46ee53b2d1abf660f8be44b88219",
  "result": {
    "markdown": "---\ntitle: \"Getting to know your Data with R\"\n---\n\n\n# Goal\n\nPractice basic R commands/methods for descriptive data analysis. If you are already familiar with some of the commands/methods, practice the ones new to you.\n\n**Note**: copying and pasting early in learning will not produce the results you are looking for, and will catch up to you eventually.\n\n## Submission\n\nPlease submit `.r`, `.rmd`, or `.qmd` files ONLY.\n\n## Additional resources\n\nI wrote a Quarto book on [Exploratory Data Analysis in R](https://gchism94.github.io/Data7_EDA_In_R_Workshops/) using the `dlookr` package. I won't be showing this package here, but you can use the functions within my book below as well.\n\n# Installing required packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First run this\ninstall.packages(\"pacman\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pacman)\n\np_load(dlookr,\n       DMwR2, # Data Mining with R functions\n       GGally, # Pair-wise plots using ggplot2\n       Hmisc, # Data analysis \n       palmerpenguins, # Alternative to the Iris dataset\n       tidyverse) # Data wrangling, manipulation, visualization\n```\n:::\n\n\n# Loading data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(algae, package = \"DMwR2\")\n\nalgae |> glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 200\nColumns: 18\n$ season <fct> winter, spring, autumn, spring, autumn, winter, summer, autumn,…\n$ size   <fct> small, small, small, small, small, small, small, small, small, …\n$ speed  <fct> medium, medium, medium, medium, medium, high, high, high, mediu…\n$ mxPH   <dbl> 8.00, 8.35, 8.10, 8.07, 8.06, 8.25, 8.15, 8.05, 8.70, 7.93, 7.7…\n$ mnO2   <dbl> 9.8, 8.0, 11.4, 4.8, 9.0, 13.1, 10.3, 10.6, 3.4, 9.9, 10.2, 11.…\n$ Cl     <dbl> 60.800, 57.750, 40.020, 77.364, 55.350, 65.750, 73.250, 59.067,…\n$ NO3    <dbl> 6.238, 1.288, 5.330, 2.302, 10.416, 9.248, 1.535, 4.990, 0.886,…\n$ NH4    <dbl> 578.000, 370.000, 346.667, 98.182, 233.700, 430.000, 110.000, 2…\n$ oPO4   <dbl> 105.000, 428.750, 125.667, 61.182, 58.222, 18.250, 61.250, 44.6…\n$ PO4    <dbl> 170.000, 558.750, 187.057, 138.700, 97.580, 56.667, 111.750, 77…\n$ Chla   <dbl> 50.000, 1.300, 15.600, 1.400, 10.500, 28.400, 3.200, 6.900, 5.5…\n$ a1     <dbl> 0.0, 1.4, 3.3, 3.1, 9.2, 15.1, 2.4, 18.2, 25.4, 17.0, 16.6, 32.…\n$ a2     <dbl> 0.0, 7.6, 53.6, 41.0, 2.9, 14.6, 1.2, 1.6, 5.4, 0.0, 0.0, 0.0, …\n$ a3     <dbl> 0.0, 4.8, 1.9, 18.9, 7.5, 1.4, 3.2, 0.0, 2.5, 0.0, 0.0, 0.0, 2.…\n$ a4     <dbl> 0.0, 1.9, 0.0, 0.0, 0.0, 0.0, 3.9, 0.0, 0.0, 2.9, 0.0, 0.0, 0.0…\n$ a5     <dbl> 34.2, 6.7, 0.0, 1.4, 7.5, 22.5, 5.8, 5.5, 0.0, 0.0, 1.2, 0.0, 1…\n$ a6     <dbl> 8.3, 0.0, 0.0, 0.0, 4.1, 12.6, 6.8, 8.7, 0.0, 0.0, 0.0, 0.0, 0.…\n$ a7     <dbl> 0.0, 2.1, 9.7, 1.4, 1.0, 2.9, 0.0, 0.0, 0.0, 1.7, 6.0, 1.5, 2.1…\n```\n:::\n:::\n\n\nThe `|>` is the Base R pipe as opposed to the `magrittr` pipe `%>%`. The `|>` pipe can be utilized for most functions in R, while the `%>%` pipe is more restricted towards the `tidyverse`.\n\n# Central tendency: mean, median, mode\n\n## Mean\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalgae$a1 |>\n  mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 16.9235\n```\n:::\n:::\n\n\n## Median\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalgae$a1 |>\n  median()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6.95\n```\n:::\n:::\n\n\n## Mode\n\nBase R doesn't have a function for mode, create a simple one to illustrate how to create a function.\\\n(this method works only for unimodal data.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMode <- function(x, na.rm=FALSE){\nif(na.rm) x<-x[!is.na(x)]\nux <- unique (x)\nreturn (ux[which.max(tabulate(match(x, ux)))])\n}\n\nalgae$a2 |> Mode()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\n## `DMwR` `centralValue()` function:\n\nreturns the median for numerical variable, or the mode for nominal variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Numerical variable\nalgae$a1 |> centralValue()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6.95\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Nominal variable\nalgae$speed |> centralValue()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"high\"\n```\n:::\n:::\n\n\n# Statistics of spread (variation)\n\n## Variance\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalgae$a1 |> var()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 455.7532\n```\n:::\n:::\n\n\n## Standard deviation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalgae$a1 |> sd()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 21.34838\n```\n:::\n:::\n\n\n## Range\n\nNote that this gives you both maximum and minimum values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalgae$a1 |> range()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  0.0 89.8\n```\n:::\n:::\n\n\n## Maximum value\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalgae$a1 |> max()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 89.8\n```\n:::\n:::\n\n\n## Minimum value\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalgae$a1 |> min()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\n## Interquartile range\n\n3rd quartile (75%) - 1st quartile (25%)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalgae$a1 |> IQR()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 23.3\n```\n:::\n:::\n\n\n## Quantiles\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalgae$a1 |> quantile()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   0%   25%   50%   75%  100% \n 0.00  1.50  6.95 24.80 89.80 \n```\n:::\n:::\n\n\nSpecifying specific quantiles:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalgae$a1 |> quantile(probs = c(0.2, 0.8))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  20%   80% \n 1.20 32.18 \n```\n:::\n:::\n\n\n# Missing values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(purrr)\n# Compute the total number of NA values in the dataset\nnas <- algae %>% \n  purrr::map_dbl(~sum(is.na(.))) %>% \n  sum()\n\ncat(\"The dataset contains \", nas, \"NA values. \\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe dataset contains  33 NA values. \n```\n:::\n\n```{.r .cell-code}\n# Compute the number of incomplete rows in the dataset\nincomplete_rows <- algae %>% \n  summarise_all(~!complete.cases(.)) %>%\n  nrow()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\nℹ The deprecated feature was likely used in the dplyr package.\n  Please report the issue at <https://github.com/tidyverse/dplyr/issues>.\n```\n:::\n\n```{.r .cell-code}\ncat(\"The dataset contains \", incomplete_rows, \"(out of \", nrow(algae),\") incomplete rows. \\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe dataset contains  200 (out of  200 ) incomplete rows. \n```\n:::\n:::\n\n\n# Summaries of a dataset\n\n## Base R's `summary()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalgae |> summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    season       size       speed         mxPH            mnO2       \n autumn:40   large :45   high  :84   Min.   :5.600   Min.   : 1.500  \n spring:53   medium:84   low   :33   1st Qu.:7.700   1st Qu.: 7.725  \n summer:45   small :71   medium:83   Median :8.060   Median : 9.800  \n winter:62                           Mean   :8.012   Mean   : 9.118  \n                                     3rd Qu.:8.400   3rd Qu.:10.800  \n                                     Max.   :9.700   Max.   :13.400  \n                                     NA's   :1       NA's   :2       \n       Cl               NO3              NH4                oPO4       \n Min.   :  0.222   Min.   : 0.050   Min.   :    5.00   Min.   :  1.00  \n 1st Qu.: 10.981   1st Qu.: 1.296   1st Qu.:   38.33   1st Qu.: 15.70  \n Median : 32.730   Median : 2.675   Median :  103.17   Median : 40.15  \n Mean   : 43.636   Mean   : 3.282   Mean   :  501.30   Mean   : 73.59  \n 3rd Qu.: 57.824   3rd Qu.: 4.446   3rd Qu.:  226.95   3rd Qu.: 99.33  \n Max.   :391.500   Max.   :45.650   Max.   :24064.00   Max.   :564.60  \n NA's   :10        NA's   :2        NA's   :2          NA's   :2       \n      PO4              Chla               a1              a2        \n Min.   :  1.00   Min.   :  0.200   Min.   : 0.00   Min.   : 0.000  \n 1st Qu.: 41.38   1st Qu.:  2.000   1st Qu.: 1.50   1st Qu.: 0.000  \n Median :103.29   Median :  5.475   Median : 6.95   Median : 3.000  \n Mean   :137.88   Mean   : 13.971   Mean   :16.92   Mean   : 7.458  \n 3rd Qu.:213.75   3rd Qu.: 18.308   3rd Qu.:24.80   3rd Qu.:11.375  \n Max.   :771.60   Max.   :110.456   Max.   :89.80   Max.   :72.600  \n NA's   :2        NA's   :12                                        \n       a3               a4               a5               a6        \n Min.   : 0.000   Min.   : 0.000   Min.   : 0.000   Min.   : 0.000  \n 1st Qu.: 0.000   1st Qu.: 0.000   1st Qu.: 0.000   1st Qu.: 0.000  \n Median : 1.550   Median : 0.000   Median : 1.900   Median : 0.000  \n Mean   : 4.309   Mean   : 1.992   Mean   : 5.064   Mean   : 5.964  \n 3rd Qu.: 4.925   3rd Qu.: 2.400   3rd Qu.: 7.500   3rd Qu.: 6.925  \n Max.   :42.800   Max.   :44.600   Max.   :44.400   Max.   :77.600  \n                                                                    \n       a7        \n Min.   : 0.000  \n 1st Qu.: 0.000  \n Median : 1.000  \n Mean   : 2.495  \n 3rd Qu.: 2.400  \n Max.   :31.600  \n                 \n```\n:::\n:::\n\n\n## `Hmisc`'s `describe()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"penguins\")\npenguins |> Hmisc::describe()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\npenguins \n\n 8  Variables      344  Observations\n--------------------------------------------------------------------------------\nspecies \n       n  missing distinct \n     344        0        3 \n                                        \nValue         Adelie Chinstrap    Gentoo\nFrequency        152        68       124\nProportion     0.442     0.198     0.360\n--------------------------------------------------------------------------------\nisland \n       n  missing distinct \n     344        0        3 \n                                        \nValue         Biscoe     Dream Torgersen\nFrequency        168       124        52\nProportion     0.488     0.360     0.151\n--------------------------------------------------------------------------------\nbill_length_mm \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     342        2      164        1    43.92    6.274    35.70    36.60 \n     .25      .50      .75      .90      .95 \n   39.23    44.45    48.50    50.80    51.99 \n\nlowest : 32.1 33.1 33.5 34   34.1, highest: 55.1 55.8 55.9 58   59.6\n--------------------------------------------------------------------------------\nbill_depth_mm \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     342        2       80        1    17.15    2.267     13.9     14.3 \n     .25      .50      .75      .90      .95 \n    15.6     17.3     18.7     19.5     20.0 \n\nlowest : 13.1 13.2 13.3 13.4 13.5, highest: 20.7 20.8 21.1 21.2 21.5\n--------------------------------------------------------------------------------\nflipper_length_mm \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     342        2       55    0.999    200.9    16.03    181.0    185.0 \n     .25      .50      .75      .90      .95 \n   190.0    197.0    213.0    220.9    225.0 \n\nlowest : 172 174 176 178 179, highest: 226 228 229 230 231\n--------------------------------------------------------------------------------\nbody_mass_g \n       n  missing distinct     Info     Mean      Gmd      .05      .10 \n     342        2       94        1     4202    911.8     3150     3300 \n     .25      .50      .75      .90      .95 \n    3550     4050     4750     5400     5650 \n\nlowest : 2700 2850 2900 2925 2975, highest: 5850 5950 6000 6050 6300\n--------------------------------------------------------------------------------\nsex \n       n  missing distinct \n     333       11        2 \n                        \nValue      female   male\nFrequency     165    168\nProportion  0.495  0.505\n--------------------------------------------------------------------------------\nyear \n       n  missing distinct     Info     Mean      Gmd \n     344        0        3    0.888     2008   0.8919 \n                            \nValue       2007  2008  2009\nFrequency    110   114   120\nProportion 0.320 0.331 0.349\n\nFor the frequency table, variable is rounded to the nearest 0\n--------------------------------------------------------------------------------\n```\n:::\n:::\n\n\nGMD is the mean absolute difference between any pairs of observations. A robust dispersion measure, especially for non-normally distributed data.\n\n## `dlookr`'s `describe()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> dlookr::describe()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 26\n  described_variables     n    na   mean      sd se_mean     IQR skewness\n  <chr>               <int> <int>  <dbl>   <dbl>   <dbl>   <dbl>    <dbl>\n1 bill_length_mm        342     2   43.9   5.46   0.295     9.27   0.0531\n2 bill_depth_mm         342     2   17.2   1.97   0.107     3.1   -0.143 \n3 flipper_length_mm     342     2  201.   14.1    0.760    23      0.346 \n4 body_mass_g           342     2 4202.  802.    43.4    1200      0.470 \n5 year                  344     0 2008.    0.818  0.0441    2     -0.0537\n# ℹ 18 more variables: kurtosis <dbl>, p00 <dbl>, p01 <dbl>, p05 <dbl>,\n#   p10 <dbl>, p20 <dbl>, p25 <dbl>, p30 <dbl>, p40 <dbl>, p50 <dbl>,\n#   p60 <dbl>, p70 <dbl>, p75 <dbl>, p80 <dbl>, p90 <dbl>, p95 <dbl>,\n#   p99 <dbl>, p100 <dbl>\n```\n:::\n:::\n\n\n# Summaries on a subset of data\n\n`dplyr`'s `summarise()` and `summarise_all()`, or use them with `select()` and `group_by()` to create summaries on\\\nsubset of data. Note: `summarise()` = `summarize()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalgae |>\n  summarise(avgNO3 = mean(NO3, na.rm=TRUE),\n            medA1 = median(a1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  avgNO3 medA1\n   <dbl> <dbl>\n1   3.28  6.95\n```\n:::\n:::\n\n\n`summarise_all()` can be used to apply any function that produces a scalar value to any column of a data\\\nframe table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalgae |>\n  select(mxPH:Cl) |>\n  summarise_all(list(mean, median), na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 6\n  mxPH_fn1 mnO2_fn1 Cl_fn1 mxPH_fn2 mnO2_fn2 Cl_fn2\n     <dbl>    <dbl>  <dbl>    <dbl>    <dbl>  <dbl>\n1     8.01     9.12   43.6     8.06      9.8   32.7\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nalgae |>\n  select(a1:a7) |>\n  summarise_all(funs(var))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 7\n     a1    a2    a3    a4    a5    a6    a7\n  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1  456.  122.  48.3  19.5  56.1  136.  26.6\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nalgae |>\n  select(a1:a7) |>\n  summarise_all(c(\"min\", \"max\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 14\n  a1_min a2_min a3_min a4_min a5_min a6_min a7_min a1_max a2_max a3_max a4_max\n   <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1      0      0      0      0      0      0      0   89.8   72.6   42.8   44.6\n# ℹ 3 more variables: a5_max <dbl>, a6_max <dbl>, a7_max <dbl>\n```\n:::\n:::\n\n\n## Use `summarise()` with `group_by()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalgae |>\n  group_by(season, size) |>\n  summarise(nObs = n(), mA7 = median(a7))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'season'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 4\n# Groups:   season [4]\n   season size    nObs   mA7\n   <fct>  <fct>  <int> <dbl>\n 1 autumn large     11  0   \n 2 autumn medium    16  1.05\n 3 autumn small     13  0   \n 4 spring large     12  1.95\n 5 spring medium    21  1   \n 6 spring small     20  0   \n 7 summer large     10  0   \n 8 summer medium    21  1   \n 9 summer small     14  1.45\n10 winter large     12  0   \n11 winter medium    26  1.4 \n12 winter small     24  0   \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  group_by(species) |>\n  summarise(var = var(bill_length_mm, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  species     var\n  <fct>     <dbl>\n1 Adelie     7.09\n2 Chinstrap 11.2 \n3 Gentoo     9.50\n```\n:::\n:::\n\n\n## Aggregating data\n\nCan be helpful for summary functions that don't return a scalar\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  group_by(species) |>\n  reframe(var = quantile(bill_length_mm, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 × 2\n   species     var\n   <fct>     <dbl>\n 1 Adelie     32.1\n 2 Adelie     36.8\n 3 Adelie     38.8\n 4 Adelie     40.8\n 5 Adelie     46  \n 6 Chinstrap  40.9\n 7 Chinstrap  46.3\n 8 Chinstrap  49.6\n 9 Chinstrap  51.1\n10 Chinstrap  58  \n11 Gentoo     40.9\n12 Gentoo     45.3\n13 Gentoo     47.3\n14 Gentoo     49.6\n15 Gentoo     59.6\n```\n:::\n:::\n\n\n`reframe()` expects a scalar result returned by the function, but quantile returns a vector.\n\n**Note**: Aggregating data with summarize was deprecated in `dplyr 1.1.0`, `reframe()` should be used instead.\n\nI recommend just using `dlookr`...\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  group_by(species) |>\n  dlookr::describe(bill_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 27\n  described_variables species       n    na  mean    sd se_mean   IQR skewness\n  <chr>               <fct>     <int> <int> <dbl> <dbl>   <dbl> <dbl>    <dbl>\n1 bill_length_mm      Adelie      151     1  38.8  2.66   0.217  4      0.162 \n2 bill_length_mm      Chinstrap    68     0  48.8  3.34   0.405  4.73  -0.0906\n3 bill_length_mm      Gentoo      123     1  47.5  3.08   0.278  4.25   0.651 \n# ℹ 18 more variables: kurtosis <dbl>, p00 <dbl>, p01 <dbl>, p05 <dbl>,\n#   p10 <dbl>, p20 <dbl>, p25 <dbl>, p30 <dbl>, p40 <dbl>, p50 <dbl>,\n#   p60 <dbl>, p70 <dbl>, p75 <dbl>, p80 <dbl>, p90 <dbl>, p95 <dbl>,\n#   p99 <dbl>, p100 <dbl>\n```\n:::\n:::\n\n\n#### [Grouping functions](https://dplyr.tidyverse.org/reference/index.html#:~:text=This%20%28mostly%29%20experimental%20family%20of%20functions%20are%20used,Apply%20a%20function%20to%20each%20group%20group_trim%20%28%29)\n\n# \\[Advanced\\]\n\n## Getting to know your dataset:\n\n1.  List data types of the attributes in your tidy dataset\n\n2.  Check for skewness in data distribution in the attributes\n\n3.  Check for correlations among attributes\n\n4.  Examine the extent of missing data. What would be the best way to deal with the missing data in this case?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}