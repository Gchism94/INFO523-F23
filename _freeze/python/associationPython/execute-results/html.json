{
  "hash": "4c19ebaa3df59fb9db801c8adbf198cd",
  "result": {
    "markdown": "---\ntitle: Association in Python\ndescription: This is a short tutorial with my simple understanding of association analysis for marketing applications in python\n---\n\n::: {.cell}\n\n:::\n\n\n## **Read in a sample retail dataset available from Kaggle**\n\nThe dataset contains mock retail orders of products that we can use as our template for association analysis\n\n<https://www.kaggle.com/datasets/knightbearr/sales-product-data>. The order ID contains a unique transaction or order while the product column contains typical items that are frequently bought together\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd \nimport numpy as np\nsales_april = pd.read_csv('../python/data/Sales_April_2019.csv')\n\nsales_april.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Order ID  ...                      Purchase Address\n0   176558  ...          917 1st St, Dallas, TX 75001\n1      NaN  ...                                   NaN\n2   176559  ...     682 Chestnut St, Boston, MA 02215\n3   176560  ...  669 Spruce St, Los Angeles, CA 90001\n4   176560  ...  669 Spruce St, Los Angeles, CA 90001\n\n[5 rows x 6 columns]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nprint('Total item sales (ignoring quanitities)')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTotal item sales (ignoring quanitities)\n```\n:::\n\n```{.python .cell-code}\nprint(len(sales_april))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n18383\n```\n:::\n\n```{.python .cell-code}\nprint('Total orders')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTotal orders\n```\n:::\n\n```{.python .cell-code}\nprint(len(sales_april['Order ID'].value_counts()))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n17538\n```\n:::\n\n```{.python .cell-code}\nprint('Total unique products')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTotal unique products\n```\n:::\n\n```{.python .cell-code}\nprint(len(sales_april['Product'].value_counts()))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n20\n```\n:::\n:::\n\n\nThere were 18,383 items sold in April 2019, with 17538 unique orders and 20 unique products. How do we figure out which pairs of products to market together to lift sales the next month? The unique products (electronics) available in the dataset are shown below:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsales_april['Product'].value_counts()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nProduct\nLightning Charging Cable      2201\nUSB-C Charging Cable          2079\nAA Batteries (4-pack)         2063\nAAA Batteries (4-pack)        1989\nWired Headphones              1890\nApple Airpods Headphones      1515\nBose SoundSport Headphones    1280\n27in FHD Monitor               734\niPhone                         693\n34in Ultrawide Monitor         650\nGoogle Phone                   581\n27in 4K Gaming Monitor         563\nFlatscreen TV                  458\nMacbook Pro Laptop             453\nThinkPad Laptop                392\n20in Monitor                   390\nVareebadd Phone                220\nLG Dryer                        77\nLG Washing Machine              61\nProduct                         35\nName: count, dtype: int64\n```\n:::\n:::\n\n\n## **Restructure the dataset into an order ID, product list format** \n\nThis is so it's easier to figure out which items sold together in orders.\n\nOne way to do this is to create a pivot table of orders and quantity using the pandas pivot method <https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.pivot.html>\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsales_filter = sales_april[['Order ID', 'Product']] #Ignore date and purchase address for now\nsales_filter = sales_filter.reset_index()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_orders = sales_filter.pivot_table(index = 'Order ID', columns = 'Product', aggfunc = 'count')\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_orders.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                index                         ...                        \nProduct  20in Monitor 27in 4K Gaming Monitor  ... Wired Headphones iPhone\nOrder ID                                      ...                        \n176558            NaN                    NaN  ...              NaN    NaN\n176559            NaN                    NaN  ...              NaN    NaN\n176560            NaN                    NaN  ...              1.0    NaN\n176561            NaN                    NaN  ...              1.0    NaN\n176562            NaN                    NaN  ...              NaN    NaN\n\n[5 rows x 20 columns]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n#Fill null values in the dataframe\ndf_orders = df_orders.fillna(0)\ndf_orders.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                index                         ...                        \nProduct  20in Monitor 27in 4K Gaming Monitor  ... Wired Headphones iPhone\nOrder ID                                      ...                        \n176558            0.0                    0.0  ...              0.0    0.0\n176559            0.0                    0.0  ...              0.0    0.0\n176560            0.0                    0.0  ...              1.0    0.0\n176561            0.0                    0.0  ...              1.0    0.0\n176562            0.0                    0.0  ...              0.0    0.0\n\n[5 rows x 20 columns]\n```\n:::\n:::\n\n\n## Print the support of each item\n\ni.e. how frequently the item occurs over the total number of orders\n\nWe only count each item once in an order for simplicity.\n\nBased on the summary below it looks like lightning charging cables, USBC, AA Batteries, Wired headphones and airpods are more frequent selling items. However, note that low support items are more expensive so it's a good idea to cross sell them alongside a high frequency selling item\n\n\n::: {.cell}\n\n```{.python .cell-code}\n#Convert df orders to boolean\ncol_names = df_orders.columns\ndf_orders = df_orders[col_names].astype('bool')\ndf_orders.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                index                         ...                        \nProduct  20in Monitor 27in 4K Gaming Monitor  ... Wired Headphones iPhone\nOrder ID                                      ...                        \n176558          False                  False  ...            False  False\n176559          False                  False  ...            False  False\n176560          False                  False  ...             True  False\n176561          False                  False  ...             True  False\n176562          False                  False  ...            False  False\n\n[5 rows x 20 columns]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf_orders.mean().sort_values(ascending=False).plot(kind='bar')\n```\n\n::: {.cell-output-display}\n![](associationPython_files/figure-html/unnamed-chunk-9-1.png){width=614}\n:::\n:::\n\n\n## **Use the apriori algorithm to identify a set of meaningful rules**\n\nThese rules will help cross sell products that go well together to boost sales. For example, if we want to increase the sales of headsets - would it make more sense to cross sell the mackbook pro with the airpods or with the bose headphones? We will only consider cross selling pairs of items together so this will consider 2 rule combinations only\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom mlxtend.frequent_patterns import association_rules\nfrom mlxtend.frequent_patterns import apriori\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n#Compute items that sell at minimum in 0.001% of all orders placed in the month (min_support)\nfrequent_itemsets = apriori(df_orders, min_support = 0.00000001,max_len = 2, use_colnames = True)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n#Compute pairs of orders that have a meaningful lift of more than 1 in their sales when marketed together\nfrequent_itemsets_rules = association_rules(frequent_itemsets,metric = \"lift\", min_threshold = 1.0)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfrequent_itemsets_rules\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                           antecedents  ... zhangs_metric\n0      ((index, USB-C Charging Cable))  ...      0.391666\n1              ((index, Google Phone))  ...      0.357158\n2                    ((index, iPhone))  ...      0.181122\n3  ((index, Lightning Charging Cable))  ...      0.198853\n4           ((index, Vareebadd Phone))  ...      0.319023\n5      ((index, USB-C Charging Cable))  ...      0.357294\n\n[6 rows x 10 columns]\n```\n:::\n:::\n\n\n## Conclusion\n\nThough more close inspection of all individual pairs of items is needed, this dataset shows that marketing USB sales with google phones can lift the sales of individual items. However, we should also consider other metrics such as the support of individual items. For example, USB cables and lightning charging cables also sell well on their own. However, retailers may get a slight boost in the sales of their phones if they pair them up with the cables as well\n",
    "supporting": [
      "associationPython_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}